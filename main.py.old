#!/usr/bin/env python3

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GdkPixbuf, GLib

import os
import json
import threading
import requests

from ptm import config
from ptm import theme_handler
from ptm import resize

THEMES_URL = "https://raw.githubusercontent.com/SoulInfernoDE/plymouth-theme-manager/refs/heads/main/plymouth_theme_manager/themes.json"
LOCAL_THEMES_PATH = "/usr/share/plymouth/themes_manager/themes.json"
ANIMATED_THEMES_DIR = "/usr/share/icons/animated/themes"

class ThemeRow(Gtk.ListBoxRow):
    def __init__(self, theme_data, installed_themes, install_callback):
        super().__init__()
        self.theme = theme_data
        self.installed_themes = installed_themes
        self.install_callback = install_callback
        self.set_margin_top(6)
        self.set_margin_bottom(6)
        self.set_margin_start(6)
        self.set_margin_end(6)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(vbox)

        # Name über dem Bild zentriert
        label = Gtk.Label(label=theme_data.get("name", "Unbekannt"))
        label.set_halign(Gtk.Align.CENTER)
        vbox.pack_start(label, False, False, 0)

        # Bild
        self.image = Gtk.Image()
        vbox.pack_start(self.image, False, False, 0)

        # Button "Installieren" zentriert
        self.install_btn = Gtk.Button(label="Installieren")
        self.install_btn.set_halign(Gtk.Align.CENTER)
        self.install_btn.connect("clicked", self.on_install_clicked)
        vbox.pack_start(self.install_btn, False, False, 0)

        self.load_preview()

    def load_preview(self):
        url = self.theme.get("preview_url", "")
        if not url:
            self.image.set_from_icon_name("image-missing", Gtk.IconSize.DIALOG)
            return

        def download_and_scale():
            try:
                r = requests.get(url, timeout=10)
                r.raise_for_status()
                data = r.content

                # Wenn GIF, skalieren mit Pillow
                if url.lower().endswith(".gif"):
                    scaled_bytes = resize.scale_gif_bytes(data, target_height=192)
                    if scaled_bytes:
                        # In temporäre Datei speichern (fixes Problem mit Animation)
                        temp_path = os.path.join(ANIMATED_THEMES_DIR, f"{self.theme['name']}.gif")
                        os.makedirs(ANIMATED_THEMES_DIR, exist_ok=True)
                        with open(temp_path, "wb") as f:
                            f.write(scaled_bytes)

                        GLib.idle_add(self.set_animation_from_file, temp_path)
                    else:
                        GLib.idle_add(self.image.set_from_icon_name, "image-missing", Gtk.IconSize.DIALOG)
                else:
                    loader = GdkPixbuf.PixbufLoader.new_with_type("png")
                    loader.write(data)
                    loader.close()
                    pixbuf = loader.get_pixbuf()
                    scale = 192 / pixbuf.get_height()
                    width = int(pixbuf.get_width() * scale)
                    scaled = pixbuf.scale_simple(width, 192, GdkPixbuf.InterpType.BILINEAR)
                    GLib.idle_add(self.image.set_from_pixbuf, scaled)
            except Exception as e:
                print("Bild konnte nicht geladen werden:", e)
                GLib.idle_add(self.image.set_from_icon_name, "image-missing", Gtk.IconSize.DIALOG)

        threading.Thread(target=download_and_scale, daemon=True).start()

    def set_animation_from_file(self, filepath):
        try:
            animation = GdkPixbuf.PixbufAnimation.new_from_file(filepath)
            self.image.set_from_animation(animation)
        except Exception as e:
            print("Fehler PixbufAnimation:", e)
            self.image.set_from_icon_name("image-missing", Gtk.IconSize.DIALOG)

    def on_install_clicked(self, button):
        success = theme_handler.install_theme(
            self.theme.get("name"),
            self.theme.get("theme_url")
        )
        if success:
            dialog = Gtk.MessageDialog(
                transient_for=self.get_toplevel(),
                flags=0,
                message_type=Gtk.MessageType.INFO,
                buttons=Gtk.ButtonsType.OK,
                text=f"Theme '{self.theme.get('name')}' wurde erfolgreich installiert.",
            )
            dialog.run()
            dialog.destroy()
        else:
            dialog = Gtk.MessageDialog(
                transient_for=self.get_toplevel(),
                flags=0,
                message_type=Gtk.MessageType.ERROR,
                buttons=Gtk.ButtonsType.CLOSE,
                text=f"Fehler bei der Installation von '{self.theme.get('name')}'.",
            )
            dialog.run()
            dialog.destroy()

        if self.install_callback:
            self.install_callback()

class ThemeManager(Gtk.Window):
    def __init__(self):
        super().__init__(title="Plymouth Theme Manager")
        self.set_default_size(640, 480)
        self.set_border_width(12)

        self.ensure_dirs()

        self.config = config.load_config()
        self.installed_themes = theme_handler.get_installed_themes()

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=8)
        self.add(vbox)

        self.list

